package undirected

import org.scalacheck.Gen
import org.scalacheck.Gen._

/** The test class for [[SimpleGraphNeighborsImpl]] implementation */
class SimpleGraphMatrixImplSpec extends SimpleGraphSpec(SimpleGraphMatrixImplSpec)

object SimpleGraphMatrixImplSpec extends SimpleGraphSpecCompanion[Int]("SimpleGraphMatrixImpl") {
  /*
    /** @inheritdoc */
    val vertex : Gen[Int] = posNum[Int]

    def matrixFromVerticesAndEdges[V](vertices: Set[V], edges: Set[Edge[V]]) : IndexedSeq[IndexedSeq[Int]] =
      vertices.foldLeft(IndexedSeq[IndexedSeq[Int]])

  /** @inheritdoc */
    def graphWithAtLeast(vertexMinCount: Int, edgeMinCount: Int = 0): Gen[SimpleGraphMatrixImpl[Int]] =
      for(
        vertexAdditionalCount <- posNum[Int] ;
        vertexCount <- Gen.const((vertexMinCount + vertexAdditionalCount) max 1) ;
        vs <- Gen.containerOfN[Set, Int](vertexCount, vertex) ;
        edgeCount <- Gen.choose(edgeMinCount, vertexCount * (vertexCount - 1) / 2) ;
        es <- Gen.containerOfN[Set, Edge[Int]](edgeCount, edgeFrom(vs))
      ) yield SimpleGraphMatrixImpl()
*/
}